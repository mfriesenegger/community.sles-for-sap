---
- name: Assert that required variables are defined and populated
  ansible.builtin.assert:
    that:
      - "{{ item }} is defined"
      - "{{ item }} | length != 0"
    fail_msg: >-
      The variable '{{ item }}' is either not defined or not populated. The
      variable primary must be defined and populated.
    success_msg: >-
      The variable '{{ item }}' is defined and populated.
  loop: "{{ int_var_required_vars }}"

- name: Assert that the primary and secondary nodes match a hostname in the play
  ansible.builtin.assert:
    that: >-
      {{ item.value }} in ansible_play_hosts
    fail_msg: >-
      The value of the variable '{{ item.name }}'({{ item.value }}) is not a host in this
      play. Ensure that the variable primary matches a host in the play.
    success_msg: >-
      The value of 'primary' matches a host in the play.
  loop:
    - { 'name': 'hana_system_replication_primary', 'value': hana_system_replication_primary }
    - { 'name': 'hana_system_replication_secondary', 'value': hana_system_replication_secondary }
  check_mode: false

- name: Set primary fact
  ansible.builtin.set_fact:
    int_var_node_is_primary: "{{ hana_system_replication_primary == inventory_hostname }}"
  check_mode: false

- name: Include hana sid and instance variables
  ansible.builtin.include_vars: ../shared/vars/hana-sid-instance-vars.yml

- name: Include hana sid and instance checks
  ansible.builtin.include_tasks: ../shared/tasks/pre-checks-hana-sid-instance.yml

- name: Include hdbsql variables
  ansible.builtin.include_vars: ../shared/vars/hdbsql-vars.yml

- name: Include hana sid and instance checks
  ansible.builtin.include_tasks: ../shared/tasks/pre-checks-hdbsql.yml

- name: Gather package facts
  ansible.builtin.package_facts:
  check_mode: false

- name: Assert required packages are installed
  ansible.builtin.assert:
    that: "'{{ item }}' in ansible_facts.packages"
    fail_msg: >-
      The package '{{ item }}' must be installed to use this role. Install
      '{{ item }}' prior to running this role.
    success_msg: >-
      The package '{{ item }}' is installed
  loop: "{{ int_var_required_packages }}"

- name: Assert that required packages meet minimum required versions
  ansible.builtin.assert:
    that: "{{ ansible_facts['packages'][item.pkg][0].version is version(item.version), '>=' }}"
    fail_msg: >-
      The installed package '{{ item.pkg }}' is below the required version of
      '{{ item.version }}'. Upgrade the to at least this version before running
      this role.
    success_msg: >-
      The package '{{ item.pkg }}' meets the minimum required version.
  loop: "{{ int_var_min_package_version }}"

- name: Get information for required files
  ansible.builtin.stat:
    path: "{{ item }}"
  register: int_var_required_files_stat
  changed_when: false
  check_mode: false
  loop: "{{ int_var_required_files }}"

- name: Assert that required files are present
  ansible.builtin.assert:
    that:
      - item.stat.exists
      - item.stat.isreg
    fail_msg: >-
      The required file {{ item.item }} was not found. This file should be
      part of the HanaSR package which is installed. This suggests that there is
      a problem with the the HanaSR package. Reinstalling the package may fix
      the issue.
    success_msg: >-
      The file {{ item.item }} was found.
  loop: "{{ int_var_required_files_stat.results }}"

- name: Check for susTkOver hook file
  ansible.builtin.stat:
    path: "{{ int_var_sustkover_hook }}"
  register: int_reg_sustkover_hook_file
  changed_when: false
  check_mode: false

- name: Check for susChkSrv hook file
  ansible.builtin.stat:
    path: "{{ int_var_suschksrv_hook }}"
  register: int_reg_suschksrv_hook_file
  changed_when: false
  check_mode: false

- name: Check for HookHelper file
  ansible.builtin.stat:
    path: "{{ int_var_hook_helper }}"
  register: int_reg_hook_helper_file
  changed_when: false
  check_mode: false

# Check system replication configuration
- name: Set random query file paths
  ansible.builtin.set_fact:
    int_fact_pre_sys_rep_general_query_file: "/tmp/ansible_{{ lookup('community.general.random_string', length=12, special=false) }}"
    int_fact_pre_sys_rep_general_result_file: "/tmp/ansible_{{ lookup('community.general.random_string', length=12, special=false) }}"
  check_mode: false

- name: Get HANA System Replication configuration
  when:
    - int_var_node_is_primary
  block:
    # As the file created here is temporary, doesn't change the configuration
    # of the target system and will be deleted, this and other file operations
    # are not considered to make no changes
    - name: Copy HANA System Replication query to primary
      ansible.builtin.copy:
        src: 'files/get_system_replication_status.sql'
        dest: "{{ int_fact_pre_sys_rep_general_query_file }}"
        owner: 'root'
        group: 'root'
        mode: '0600'
      changed_when: false
      # Always run, even in check mode
      check_mode: false

    # As above, this is a SELECT query, and therefore doesn't change the
    # database so it considered as a none changing task
    - name: Get SAP HANA System Configuration Information
      ansible.builtin.command: >-
        {{ int_var_hdbsql_path }} {{ int_var_hdbsql_args }} -I {{ int_fact_pre_sys_rep_general_query_file }} -o {{ int_fact_pre_sys_rep_general_result_file }}
      changed_when: false
      check_mode: false

    - name: Read SAP HANA System Replication configuration
      community.general.read_csv:
        path: "{{ int_fact_pre_sys_rep_general_result_file }}"
      register: int_reg_pre_hsr_config
      check_mode: false

  always:
    # Blocks don't work with loops, so each file has to be deleted individually
    # but using blocks and the ensures that temporary files are always deleted
    # even if the tasks fail
    - name: Remove temporary query file
      ansible.builtin.file:
        path: "{{ int_fact_pre_sys_rep_general_query_file }}"
        state: absent
      changed_when: false
      check_mode: false

    - name: Remove temporary result file
      ansible.builtin.file:
        path: "{{ int_fact_pre_sys_rep_general_result_file }}"
        state: absent
      changed_when: false
      check_mode: false

- name: Assert that system replication is configured
  ansible.builtin.assert:
    that: int_reg_pre_hsr_config.list | length != 0
    fail_msg: >-
      The query used to retrieve the HANA System Replication configuration
      didn't return any lines. This indicates that system replication is not
      currently configured. Ensure HANA System Replication is configured before
      running this role.
    success_msg: >-
      The query used to retrieve the HANA System Replication configured retuned
      content.
  when: int_var_node_is_primary

- name: Get configured HANA system replication master
  ansible.builtin.set_fact:
    int_fact_primary_hsr_host: "{{
      int_reg_pre_hsr_config.list |
      map(attribute='HOST') |
      first
      }}"
  when: int_var_node_is_primary
  check_mode: false

- name: Get configured HANA system replication secondary
  ansible.builtin.set_fact:
    int_fact_secondary_hsr_host: "{{
      int_reg_pre_hsr_config.list |
      map(attribute='SECONDARY_HOST') |
      first
      }}"
  when: int_var_node_is_primary
  check_mode: false

- name: Get configured HANA System Replication status
  ansible.builtin.set_fact:
    int_fact_hsr_status: "{{
      int_reg_pre_hsr_config.list |
      map(attribute='REPLICATION_STATUS') |
      first
      }}"
  when: int_var_node_is_primary
  check_mode: false

- name: Get secondary HANA System Replication status
  ansible.builtin.set_fact:
    int_fact_hsr_secondary_status:
      "{% if int_reg_pre_hsr_config.list |
      map(attribute='SECONDARY_ACTIVE_STATUS') |
      first == 'YES' %}True{% else %}False{% endif %}"
  when: int_var_node_is_primary
  check_mode: false

- name: Get primary site name
  ansible.builtin.set_fact:
    int_var_primary_site: "{{
      int_reg_pre_hsr_config.list |
      map(attribute='SITE_NAME') |
      first
      }}"
  when: int_var_node_is_primary
  check_mode: false

- name: Get secondary site name
  ansible.builtin.set_fact:
    int_var_secondary_site: "{{
      int_reg_pre_hsr_config.list |
      map(attribute='SECONDARY_SITE_NAME') |
      first
      }}"
  when: int_var_node_is_primary
  check_mode: false

- name: Copy primary site name fact to secondary
  ansible.builtin.set_fact:
    int_var_primary_site: "{{ hostvars[hana_system_replication_primary].int_var_primary_site }}"
  when: not int_var_node_is_primary
  check_mode: false

- name: Copy secondary site name fact to secondary
  ansible.builtin.set_fact:
    int_var_secondary_site: "{{ hostvars[hana_system_replication_secondary].int_var_primary_site }}"
  when: not int_var_node_is_primary
  check_mode: false

- name: Assert that configured primary HANA system replication host matches configuration
  ansible.builtin.assert:
    that: int_fact_primary_hsr_host == hana_system_replication_primary
    fail_msg: >-
      The configured primary HANA System Replication host does not match the
      expectation. The configured primary HANA system replication host appears
      to be {{ int_fact_primary_hsr_host }}, which does not match the expected
      value set in hana_system_replication_primary
      {{ hana_system_replication_primary }}.
    success_msg: >-
      The configured and expected primary HANA system replication host match
      ({{ int_fact_primary_hsr_host }}).
  when: int_var_node_is_primary

- name: Assert that configured secondary HANA system replication host matches configuration
  ansible.builtin.assert:
    that: hana_system_replication_secondary == int_fact_secondary_hsr_host
    fail_msg: >-
      The configured primary HANA System Replication host does not match the
      expectation. The configured primary HANA system replication host appears
      to be {{ int_fact_secondary_hsr_host }}, which does not match the expected
      value set in hana_system_replication_primary
      {{ hana_system_replication_secondary }}.
    success_msg: >-
      The configured and expected primary HANA system replication host match
      ({{ int_fact_secondary_hsr_host }}).
  when: int_var_node_is_primary

- name: Assert that HANA System Replication status is active
  ansible.builtin.assert:
    that: int_fact_hsr_status == 'ACTIVE'
    fail_msg: >-
      The system replication status is {{ int_fact_hsr_status }}. This role
      requires HANA System Replication to be working correctly before it can
      begin. Therefore, the status of HANA System Replication should be
      'ACTIVE'. Check the HANA System Replication configuration
      and ensure that both nodes/sites are up and running.
    success_msg: >-
      The system replication status is {{ int_fact_hsr_status }}
  when: int_var_node_is_primary
  check_mode: false

- name: Assert that secondary HANA System Replication status is active
  ansible.builtin.assert:
    that: int_fact_hsr_secondary_status
    fail_msg: >-
      The system replication status of the secondary node  is
      '{{ int_fact_hsr_secondary_status }}'. This role requires HANA System
      Replication to be working correctly on both nodes before it can
      begin. Therefore, the status of HANA System Replication should be
      'YES'. Check the HANA System Replication configuration
      and ensure that both nodes/sites are up and running.
    success_msg: >-
      The system replication status is '{{ int_fact_hsr_secondary_status }}'.
  when: int_var_node_is_primary
