---
- name: Set random query file paths
  ansible.builtin.set_fact:
    int_fact_post_sys_rep_general_query_file: "/tmp/ansible_{{ lookup('community.general.random_string', length=12, special=false) }}"
    int_fact_post_sys_rep_general_result_file: "/tmp/ansible_{{ lookup('community.general.random_string', length=12, special=false) }}"

- name: Get HANA System Replication configuration
  when:
    - int_var_node_is_primary
  block:
    # As the file created here is temporary, doesn't change the configuration
    # of the target system and will be deleted, this and other file operations
    # are not considered to make no changes
    - name: Copy HANA System Replication query to primary
      ansible.builtin.copy:
        src: 'files/get_system_replication_status.sql'
        dest: "{{ int_fact_post_sys_rep_general_query_file }}"
        owner: 'root'
        group: 'root'
        mode: '0600'
      changed_when: false
      # Always run, even in check mode
      check_mode: false

    # As above, this is a SELECT query, and therefore doesn't change the
    # database so it considered as a none changing task
    - name: Get SAP HANA System Configuration Information
      ansible.builtin.command: >-
        {{ int_var_hdbsql_path }} {{ int_var_hdbsql_args }}
        -I {{ int_fact_post_sys_rep_general_query_file }}
        -o {{ int_fact_post_sys_rep_general_result_file }}
      changed_when: false
      check_mode: false
      no_log: true

    - name: Read SAP HANA System Replication configuration
      community.general.read_csv:
        path: "{{ int_fact_post_sys_rep_general_result_file }}"
      register: int_reg_pre_hsr_config
      check_mode: false

  always:
    # Blocks don't work with loops, so each file has to be deleted individually
    # but using blocks and the ensures that temporary files are always deleted
    # even if the tasks fail
    - name: Remove temporary query file
      ansible.builtin.file:
        path: "{{ int_fact_post_sys_rep_general_query_file }}"
        state: absent
      changed_when: false
      check_mode: false

    - name: Remove temporary result file
      ansible.builtin.file:
        path: "{{ int_fact_post_sys_rep_general_result_file }}"
        state: absent
      changed_when: false
      check_mode: false

- name: Get configured HANA system replication master
  ansible.builtin.set_fact:
    int_fact_primary_hsr_host: "{{
      int_reg_pre_hsr_config.list |
      map(attribute='HOST') |
      first
      }}"
  when: int_var_node_is_primary
  changed_when: false
  check_mode: false

- name: Get configured HANA system replication secondary
  ansible.builtin.set_fact:
    int_fact_secondary_hsr_host: "{{
      int_reg_pre_hsr_config.list |
      map(attribute='SECONDARY_HOST') |
      first
      }}"
  when: int_var_node_is_primary
  changed_when: false
  check_mode: false

- name: Get configured HANA System Replication status
  ansible.builtin.set_fact:
    int_fact_hsr_status: "{{
      int_reg_pre_hsr_config.list |
      map(attribute='REPLICATION_STATUS') |
      first
      }}"
  when: int_var_node_is_primary
  changed_when: false
  check_mode: false

- name: Get secondary HANA System Replication status
  ansible.builtin.set_fact:
    int_fact_hsr_secondary_status:
      "{% if int_reg_pre_hsr_config.list |
      map(attribute='SECONDARY_ACTIVE_STATUS') |
      first == 'YES' %}True{% else %}False{% endif %}"
  when: int_var_node_is_primary
  changed_when: false
  check_mode: false

- name: Get primary site name
  ansible.builtin.set_fact:
    int_var_primary_site: "{{
      int_reg_pre_hsr_config.list |
      map(attribute='SITE_NAME') |
      first
      }}"
  when: int_var_node_is_primary
  changed_when: false
  check_mode: false

- name: Get secondary site name
  ansible.builtin.set_fact:
    int_var_secondary_site: "{{
      int_reg_pre_hsr_config.list |
      map(attribute='SECONDARY_SITE_NAME') |
      first
      }}"
  when: int_var_node_is_primary
  changed_when: false
  check_mode: false

- name: Assert that configured primary HANA system replication host matches configuration
  ansible.builtin.assert:
    that: int_fact_primary_hsr_host == hana_system_replication_primary
    fail_msg: >-
      The configured primary HANA System Replication host does not match the
      expectation. The configured primary HANA system replication host appears
      to be {{ int_fact_primary_hsr_host }}, which does not match the expected
      value set in hana_system_replication_primary
      {{ hana_system_replication_primary }}.
    success_msg: >-
      The configured and expected primary HANA system replication host match
      ({{ int_fact_primary_hsr_host }}).
  when: int_var_node_is_primary
  check_mode: false
  changed_when: false

- name: Assert that configured secondary HANA system replication host matches configuration
  ansible.builtin.assert:
    that: hana_system_replication_secondary == int_fact_secondary_hsr_host
    fail_msg: >-
      The configured primary HANA System Replication host does not match the
      expectation. The configured primary HANA system replication host appears
      to be {{ int_fact_secondary_hsr_host }}, which does not match the expected
      value set in hana_system_replication_primary
      {{ hana_system_replication_secondary }}.
    success_msg: >-
      The configured and expected primary HANA system replication host match
      ({{ int_fact_secondary_hsr_host }}).
  when: int_var_node_is_primary
  check_mode: false
  changed_when: false

- name: Assert that HANA System Replication status is active
  ansible.builtin.assert:
    that: int_fact_hsr_status == 'ACTIVE'
    fail_msg: >-
      The system replication status is {{ int_fact_hsr_status }}. This role
      requires HANA System Replication to be working correctly before it can
      begin. Therefore, the status of HANA System Replication should be
      'ACTIVE'. Check the HANA System Replication configuration
      and ensure that both nodes/sites are up and running.
    success_msg: >-
      The system replication status is {{ int_fact_hsr_status }}
  when: int_var_node_is_primary
  check_mode: false
  changed_when: false

- name: Assert that secondary HANA System Replication status is active
  ansible.builtin.assert:
    that: int_fact_hsr_secondary_status
    fail_msg: >-
      The system replication status of the secondary node  is
      '{{ int_fact_hsr_secondary_status }}'. This role requires HANA System
      Replication to be working correctly on both nodes before it can
      begin. Therefore, the status of HANA System Replication should be
      'YES'. Check the HANA System Replication configuration
      and ensure that both nodes/sites are up and running.
    success_msg: >-
      The system replication status is '{{ int_fact_hsr_secondary_status }}'.
  when: int_var_node_is_primary
  changed_when: false

# What follows is an attempt to check that the hook/s was/were installed OK
# https://documentation.suse.com/sbp/all/html/SLES4SAP-hana-sr-guide-PerfOpt-15/index.html#id-testing-the-hook-integration
# The check should only be done if the HANA system has been reconfigured in the
# play, otherwise, we'll be dealing with old data and that could give misleading
# answers.

# Assume we need the latest nameserver file
- name: Find nameserver files
  ansible.builtin.find:
    paths: /usr/sap/SU1/HDB00/{{ inventory_hostname }}/trace
    use_regex: true
    patterns: 'nameserver_{{ inventory_hostname }}.[0-9]{5}.[0-9]{3}.trc'
  register: int_fact_found_nameserver_trace_files
  when: int_fact_configuration_needed or always_check_traces

# Get the latest file by filename
- name: Set fact for latest nameserver filename
  ansible.builtin.set_fact:
    int_fact_latest_nameserver_file: "{{
      int_fact_found_nameserver_trace_files.files |
      community.general.json_query(q1)
      }}"
  vars:
    q1: 'max_by([], &mtime).path'
  changed_when: false
  failed_when: false
  when: int_fact_configuration_needed or always_check_traces

# Assert here, before continuing to task that involve the file content
- name: Assert latest nameserver trace file was found
  ansible.builtin.assert:
    that: int_fact_latest_nameserver_file is defined
    fail_msg: >-
      It was not possible to locate the latest version of the nameserver
      trace file. This could be either a change to the trace file structure
      or location. Or it could be that there is a serious problem with the
      HANA database. Check that HANA is running correctly and the
      sles-for-sap-roles is up to date.
    success_msg: >-
      The file {{ int_fact_latest_nameserver_file }} was identified as the
      latest nameserver trace file
  changed_when: false
  failed_when: false
  when: int_fact_configuration_needed or always_check_traces

- name: Store file
  ansible.builtin.command:
    "cat {{ int_fact_latest_nameserver_file }}"
  register: int_reg_nameserver_data
  check_mode: false
  changed_when: false
  failed_when: false
  when: int_fact_configuration_needed or always_check_traces

- name: Get NameserverStartUp
  ansible.builtin.set_fact:
    int_fact_latest_nameserver_start: >-
      {{ int_reg_nameserver_data.stdout |
      ansible.builtin.regex_findall("[0-9]{4}-[0-9]{2}-[0-9]{2}.*[0-9]{2}:[0-9]{2}:[0-9]{2}.*Starting hdbnameserver") |
      last }}
  changed_when: false
  failed_when: false
  when: int_fact_configuration_needed or always_check_traces

- name: Get SAPHanaSR Hook Load start time
  ansible.builtin.set_fact:
    int_fact_latest_saphanasr_load_start: >-
      {{ int_reg_nameserver_data.stdout |
      ansible.builtin.regex_findall("[0-9]{4}-[0-9]{2}-[0-9]{2}.*[0-9]{2}:[0-9]{2}:[0-9]{2}.*HADR.*load.*'SAPHanaSR'") |
      last
      }}
  changed_when: false
  when: int_fact_saphanasr_hook_change or always_check_traces

- name: Get SAPHanaSR Hook init time
  ansible.builtin.set_fact:
    int_fact_latest_saphanasr_init: >-
      {{ int_reg_nameserver_data.stdout |
      ansible.builtin.regex_findall("[0-9]{4}-[0-9]{2}-[0-9]{2}.*[0-9]{2}:[0-9]{2}:[0-9]{2}.*SAPHanaSR.init") |
      last
      }}
  changed_when: false
  when: int_fact_saphanasr_hook_change or always_check_traces

- name: Get SusTkOver Hook Load start time
  ansible.builtin.set_fact:
    int_fact_latest_sustkover_load_start: >-
      {{ int_reg_nameserver_data.stdout |
      ansible.builtin.regex_findall("[0-9]{4}-[0-9]{2}-[0-9]{2}.*[0-9]{2}:[0-9]{2}:[0-9]{2}.*HADR.*load.*susTkOver") |
      last
      }}
  changed_when: false
  when: int_fact_sustkover_hook_change or always_check_traces and int_reg_sustkover_hook_file.stat.exists

- name: Get SusTkOver Hook init start time
  ansible.builtin.set_fact:
    int_fact_latest_sustkover_init: >-
      {{ int_reg_nameserver_data.stdout |
      ansible.builtin.regex_findall("[0-9]{4}-[0-9]{2}-[0-9]{2}.*[0-9]{2}:[0-9]{2}:[0-9]{2}.*susTkOver.init") |
      last
      }}
  changed_when: false
  when: int_fact_sustkover_hook_change or always_check_traces and int_reg_sustkover_hook_file.stat.exists

- name: Get SusChkSrv Hook Load start time
  ansible.builtin.set_fact:
    int_fact_latest_suschksrv_load_start: >-
      {{ int_reg_nameserver_data.stdout |
      ansible.builtin.regex_findall("[0-9]{4}-[0-9]{2}-[0-9]{2}.*[0-9]{2}:[0-9]{2}:[0-9]{2}.*HADR.*load.*susChkSrv") |
      last
      }}
  changed_when: false
  when: int_fact_suschksrv_hook_change or always_check_traces and int_reg_suschksrv_hook_file.stat.exists

- name: Get SusChkSrv Hook init start time
  ansible.builtin.set_fact:
    int_fact_latest_suschksrv_init: >-
      {{ int_reg_nameserver_data.stdout |
      ansible.builtin.regex_findall("[0-9]{4}-[0-9]{2}-[0-9]{2}.*[0-9]{2}:[0-9]{2}:[0-9]{2}.*susChkSrv.init") |
      last
      }}
  changed_when: false
  when: int_fact_suschksrv_hook_change or always_check_traces and int_reg_suschksrv_hook_file.stat.exists

- name: Assert that SAPHanaSR trace file data was found
  ansible.builtin.assert:
    that: "{{ item.var }} is defined"
    fail_msg: >-
      The {{ item.name }} wasn't found in the latest nameserver
      trace file. This suggests that the file format may have changed and
      this version of sles-for-sap roles is out of date. However, there is
      also a chance that the HANA database is not functioning correctly.
      Check for a newer version of sles-for-sap-roles and also check that
      HANA is functioning correctly.
    success_msg: >-
      The {{ item.name }} was identified successfully.
  loop:
    - { 'name': 'nameserver start time', 'var': 'int_fact_latest_nameserver_start' }
    - { 'name': 'SAPHanaSR load event', 'var': 'int_fact_latest_saphanasr_load_start' }
    - { 'name': 'SAPHanaSR init event', 'var': 'int_fact_latest_saphanasr_init' }
  changed_when: false
  check_mode: false
  when: int_fact_saphanasr_hook_change or always_check_traces

- name: Assert that SusTkOver trace file data was found
  ansible.builtin.assert:
    that: "{{ item.var }} is defined"
    fail_msg: >-
      The {{ item.name }} wasn't found in the latest nameserver
      trace file. This suggests that the file format may have changed and
      this version of sles-for-sap roles is out of date. However, there is
      also a chance that the HANA database is not functioning correctly.
      Check for a newer version of sles-for-sap-roles and also check that
      HANA is functioning correctly.
    success_msg: >-
      The {{ item.name }} was identified successfully.
  loop:
    - { 'name': 'SusTkOver load event', 'var': 'int_fact_latest_suschksrv_load_start' }
    - { 'name': 'SusTkOver init event', 'var': 'int_fact_latest_suschksrv_init' }
  changed_when: false
  check_mode: false
  when: int_fact_suschksrv_hook_change or always_check_traces and int_reg_suschksrv_hook_file.stat.exists

- name: Assert that SusChkSrv trace file data was found
  ansible.builtin.assert:
    that: "{{ item.var }} is defined"
    fail_msg: >-
      The {{ item.name }} wasn't found in the latest nameserver
      trace file. This suggests that the file format may have changed and
      this version of sles-for-sap roles is out of date. However, there is
      also a chance that the HANA database is not functioning correctly.
      Check for a newer version of sles-for-sap-roles and also check that
      HANA is functioning correctly.
    success_msg: >-
      The {{ item.name }} was identified successfully.
  loop:
    - { 'name': 'SusTkOver load event', 'var': 'int_fact_latest_sustkover_load_start' }
    - { 'name': 'SusTkOver init event', 'var': 'int_fact_latest_sustkover_init' }
  changed_when: false
  check_mode: false
  when: int_fact_suschksrv_hook_change or always_check_traces and int_reg_suschksrv_hook_file.stat.exists

- name: Assert that SAPHanaSR load happened after nameserver startup
  ansible.builtin.assert:
    that: >-
        ((int_fact_latest_saphanasr_load_start |
        ansible.builtin.regex_search('[0-9]{4}-[0-9]{2}-[0-9]{2}.*[0-9]{2}:[0-9]{2}:[0-9]{2}') |
        to_datetime) -
        (int_fact_latest_nameserver_start |
        ansible.builtin.regex_search('[0-9]{4}-[0-9]{2}-[0-9]{2}.*[0-9]{2}:[0-9]{2}:[0-9]{2}') |
        to_datetime)).total_seconds() >= 0
    fail_msg: >-
      The SAPHanaSR was last started before the current HANA startup, this
      suggests that the hook was not loaded!
    success_msg: >-
      The SAPHanaSR hook was loaded successfully.
  when: int_fact_saphanasr_hook_change or always_check_traces

- name: Assert that SAPHanaSR init happened after SAPHanaSR load
  ansible.builtin.assert:
    that: >-
        (( int_fact_latest_saphanasr_init |
        ansible.builtin.regex_search('[0-9]{4}-[0-9]{2}-[0-9]{2}.*[0-9]{2}:[0-9]{2}:[0-9]{2}') |
        to_datetime) -
        (int_fact_latest_saphanasr_load_start |
        ansible.builtin.regex_search('[0-9]{4}-[0-9]{2}-[0-9]{2}.*[0-9]{2}:[0-9]{2}:[0-9]{2}') |
        to_datetime)).total_seconds() >= 0
    fail_msg: >-
      The SAPHanaSR hook was last initiated before the current HANA startup,
      this suggests that the hook was not initiated!
    success_msg: >-
      The SAPHanaSR hook was initiated successfully.
  when: int_fact_saphanasr_hook_change or always_check_traces

- name: Assert that SusTkOver load happened after nameserver startup
  ansible.builtin.assert:
    that: >-
        ((int_fact_latest_sustkover_load_start |
        ansible.builtin.regex_search('[0-9]{4}-[0-9]{2}-[0-9]{2}.*[0-9]{2}:[0-9]{2}:[0-9]{2}') |
        to_datetime) -
        (int_fact_latest_nameserver_start |
        ansible.builtin.regex_search('[0-9]{4}-[0-9]{2}-[0-9]{2}.*[0-9]{2}:[0-9]{2}:[0-9]{2}') |
        to_datetime)).total_seconds() >= 0
    fail_msg: >-
      The SusTkOver was last started before the current HANA startup, this
      suggests that the hook was not loaded!
    success_msg: >-
      The SusTkOver hook was loaded successfully.
  when: int_fact_sustkover_hook_change or always_check_traces and int_reg_sustkover_hook_file.stat.exists

- name: Assert that SusTkOver init happened after SusTkOver load
  ansible.builtin.assert:
    that: >-
        ((int_fact_latest_sustkover_init |
        ansible.builtin.regex_search('[0-9]{4}-[0-9]{2}-[0-9]{2}.*[0-9]{2}:[0-9]{2}:[0-9]{2}') |
        to_datetime) -
        (int_fact_latest_sustkover_load_start |
        ansible.builtin.regex_search('[0-9]{4}-[0-9]{2}-[0-9]{2}.*[0-9]{2}:[0-9]{2}:[0-9]{2}') |
        to_datetime)).total_seconds() >= 0
    fail_msg: >-
      The SAPHanaSR hook was last initiated before the current HANA startup,
      this suggests that the hook was not initiated!
    success_msg: >-
      The SAPHanaSR hook was initiated successfully.
  when: int_fact_sustkover_hook_change or always_check_traces and int_reg_sustkover_hook_file.stat.exists

# This one
- name: Assert that SusChkSrv load happened after nameserver startup
  ansible.builtin.assert:
    that: >-
        ((int_fact_latest_suschksrv_load_start |
        ansible.builtin.regex_search('[0-9]{4}-[0-9]{2}-[0-9]{2}.*[0-9]{2}:[0-9]{2}:[0-9]{2}') |
        to_datetime) -
        (int_fact_latest_nameserver_start |
        ansible.builtin.regex_search('[0-9]{4}-[0-9]{2}-[0-9]{2}.*[0-9]{2}:[0-9]{2}:[0-9]{2}') |
        to_datetime)).total_seconds() >= 0
    fail_msg: >-
      The SusChkSrv was last started before the current HANA startup, this
      suggests that the hook was not loaded!
    success_msg: >-
      The SusTkOver hook was loaded successfully.
  when: int_fact_suschksrv_hook_change or always_check_traces and int_reg_suschksrv_hook_file.stat.exists

- name: Assert that SusChkSrv init happened after SusChkSrv load
  ansible.builtin.assert:
    that: >-
        ((int_fact_latest_suschksrv_init |
        ansible.builtin.regex_search('[0-9]{4}-[0-9]{2}-[0-9]{2}.*[0-9]{2}:[0-9]{2}:[0-9]{2}') |
        to_datetime) -
        (int_fact_latest_suschksrv_load_start|
        ansible.builtin.regex_search('[0-9]{4}-[0-9]{2}-[0-9]{2}.*[0-9]{2}:[0-9]{2}:[0-9]{2}') |
        to_datetime)).total_seconds() >= 0
    fail_msg: >-
      The SAPHanaSR hook was last initiated before the current HANA startup,
      this suggests that the hook was not initiated!
    success_msg: >-
      The SAPHanaSR hook was initiated successfully.
  when: int_fact_suschksrv_hook_change or always_check_traces and int_reg_suschksrv_hook_file.stat.exists
