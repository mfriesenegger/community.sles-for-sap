---
- name: Create random strings for temporary files
  ansible.builtin.set_fact:
    int_fact_tmp_backup_query_file: "/tmp/ansible_{{ lookup('community.general.random_string', length=12, special=false) }}"
    int_fact_tmp_results_file: "/tmp/ansible_{{ lookup('community.general.random_string', length=12, special=false) }}"
    int_fact_tmp_backup_command_file: "/tmp/ansible_{{ lookup('community.general.random_string', length=12, special=false) }}"
  when: backup_needed

# It's really important that the temporary files are destroyed even if some
# tasks fail. For that reason the following commands are in a block which has an
# always
- name: Backup
  when: backup_needed
  block:
    - name: Ensure all tenants query is copied to remote hosts
      ansible.builtin.copy:
        owner: root
        group: root
        mode: '0600'
        src: files/all_tenants_query.sql
        dest: "{{ int_fact_tmp_backup_query_file }}"

    - name: Retrieve a list of database tenants for backup
      ansible.builtin.command: >-
        {{ int_var_hdbsql_path }} {{ int_var_hdbsql_args }} -I {{ int_fact_tmp_backup_query_file }} -o {{ int_fact_tmp_results_file }}
      # The task will only run when a backup is needed due to the block when
      # condition, but to solve a linting error it is required to repeat it
      # here.
      when: backup_needed

    # It's not ideal to use command and cat like this, but the alternative is to
    # copy the remote files back to the controller which is probably a worse
    # solution
    - name: Read tenant file
      ansible.builtin.command: "cat {{ int_fact_tmp_results_file }}"
      register: int_reg_tenant_list
      changed_when: false

    - name: Set fact for database tenant names
      ansible.builtin.set_fact:
        int_fact_db_tenant_names: "{{ int_reg_tenant_list.stdout | split('\n') }}"

    - name: Prepare initial default backup SQL statement to backup all tenants
      ansible.builtin.template:
        dest: "{{ int_fact_tmp_backup_command_file }}"
        src: templates/initial_backup.j2
        owner: root
        group: root
        mode: '0600'

    # Need to set a when condition!
    - name: Run backups
      ansible.builtin.command: >-
        {{ int_var_hdbsql_path }} {{ int_var_hdbsql_args }} -I {{ int_fact_tmp_backup_command_file }}
      # The task will only run when a backup is needed due to the block when
      # condition, but to solve a linting error it is required to repeat it
      # here.
      when: backup_needed

    # With the backup now done, the backup_needed fact is set to false, so that
    # the post checks know that the backup is done
    - name: Set backup_needed fact to false
      ansible.builtin.set_fact:
        backup_needed: false | bool

  always:
    # Unfortunately, you can't currently use loops within blocks, so we'll need
    # to remove each temporary file with it's one module call
    - name: Remove temporary backup query file
      ansible.builtin.file:
        path: "{{ int_fact_tmp_backup_query_file }}"
        state: absent

    - name: Remove temporary backup command result file
      ansible.builtin.file:
        path: "{{ int_fact_tmp_backup_command_file }}"
        state: absent

    - name: Remove temporary backup command file
      ansible.builtin.file:
        path: "{{ int_fact_tmp_backup_command_file }}"
        state: absent
