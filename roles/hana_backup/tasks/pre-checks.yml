---
- name: Include hana sid and instance variables
  ansible.builtin.include_vars: ../shared/vars/hana-sid-instance-vars.yml

- name: Include hana sid and instance checks
  ansible.builtin.include_tasks: ../shared/tasks/pre-checks-hana-sid-instance.yml

- name: Include hdbsql variables
  ansible.builtin.include_vars: ../shared/vars/hdbsql-vars.yml

- name: Include hdbsql checks
  ansible.builtin.include_tasks: ../shared/tasks/pre-checks-hdbsql.yml

- name: Ensure HANA is running
  ansible.builtin.include_tasks: ../shared/tasks/pre-checks-hana-is-running.yml

- name: Ensure required variables are defined
  ansible.builtin.assert:
    that:
      "{{ item }} is defined"
    fail_msg: >-
      The variable {{ item }} is not defined.  You must define and populate this
      variable for this role to function.
    success_msg: >-
      The {{ item }} variable is correctly defined.
  loop:
    - hana_systemdb_password
  check_mode: false

# The pre-checks need to run independently of the tasks section, so we need to
# retrieve a list of tenants to check if a backup has already happened
- name: Create random strings for temporary file
  ansible.builtin.set_fact:
    int_fact_pre_tenant_query_file: "/tmp/ansible_{{ lookup('community.general.random_string', length=12, special=false) }}"
    int_fact_pre_tenant_results_file: "/tmp/ansible_{{ lookup('community.general.random_string', length=12, special=false) }}"
    int_fact_pre_backup_query_file: "/tmp/ansible_{{ lookup('community.general.random_string', length=12, special=false) }}"
    int_fact_pre_backup_result_file: "/tmp/ansible_{{ lookup('community.general.random_string', length=12, special=false) }}"
    int_fact_pre_backup_file_query_file: "/tmp/ansible_{{ lookup('community.general.random_string', length=12, special=false) }}"
    int_fact_pre_backup_file_result_file: "/tmp/ansible_{{ lookup('community.general.random_string', length=12, special=false) }}"
  check_mode: false

- name: Get tenant names
  block:
    - name: Copy tenants query to hosts
      ansible.builtin.copy:
        owner: root
        group: root
        mode: '0600'
        src: files/all_tenants_query.sql
        dest: "{{ int_fact_pre_tenant_query_file }}"
        # although this task copies a new file to the target system, the role
        # ensures that the file is removed again, even if tasks in the block
        # fail! As the file is ephemeral, the role doesn't consider this as a
        # change to the system. The same is true of all other copy/template and
        # removal operations in this role!
      changed_when: false
      check_mode: false

    - name: Retrieve a list of database tenants
      ansible.builtin.command: >-
        {{ int_var_hdbsql_path }} {{ int_var_hdbsql_args }} -I {{ int_fact_pre_tenant_query_file }} -o {{ int_fact_pre_tenant_results_file }}
      # although this task does create an output file, it is considered to make
      # no changes as the configuration of the systems isn't changed and
      # ultimately the output file is removed
      changed_when: false
      check_mode: false

    - name: Read tenant information
      community.general.read_csv:
        path: "{{ int_fact_pre_tenant_results_file }}"
      register: int_reg_tenant_names

  always:
    # Unfortunately, you can't currently use loops within blocks, so we'll need
    # to remove each temporary file with it's one module call
    - name: Remove temporary backup query file
      ansible.builtin.file:
        path: "{{ int_fact_pre_tenant_query_file }}"
        state: absent
      changed_when: false
      check_mode: false

    - name: Remove temporary backup results file
      ansible.builtin.file:
        path: "{{ int_fact_pre_tenant_results_file }}"
        state: absent
      changed_when: false
      check_mode: false

- name: Get latest full backups
  block:
    - name: Copy backup query hosts
      ansible.builtin.copy:
        owner: root
        group: root
        mode: '0600'
        src: files/latest_complete_backups.sql
        dest: "{{ int_fact_pre_backup_query_file }}"
      changed_when: false
      check_mode: false

    - name: Get latest backup data
      ansible.builtin.command: >-
        {{ int_var_hdbsql_path }} {{ int_var_hdbsql_args }} -I {{ int_fact_pre_backup_query_file }} -o {{ int_fact_pre_backup_result_file }}
      # although this task does create an output file, it is considered to make
      # no changes as the configuration of the systems isn't changed and
      # ultimately the output file is removed
      changed_when: false
      check_mode: false

    - name: Read tenant information
      community.general.read_csv:
        path: "{{ int_fact_pre_backup_result_file }}"
      register: int_reg_latest_full_backups
      check_mode: false

  always:
    - name: Remove temporary query file
      ansible.builtin.file:
        path: "{{ int_fact_pre_backup_query_file }}"
        state: absent
      changed_when: false
      check_mode: false

    - name: Remove temporary results file
      ansible.builtin.file:
        path: "{{ int_fact_pre_backup_result_file }}"
        state: absent
      changed_when: false
      check_mode: false

# If no full backups were found, then a backup is required.
# There is a potential risk here that not all tenants are fully backed up
# however, if the role is being used is intended, for an initial backup only,
# then the risk is vanishingly small
- name: Set backup_needed fact
  ansible.builtin.set_fact:
    backup_needed: >-
      {% if int_reg_latest_full_backups.list | length > 0 %}false{% else %}true{% endif %}
    check_mode: false

- name: Ensure that backup files exist
  when: not backup_needed
  block:
    - name: Populate backup files template
      ansible.builtin.template:
        dest: "{{ int_fact_pre_backup_file_query_file }}"
        owner: root
        src: templates/get_backup_file_locations.j2
        group: root
        mode: '0600'
      changed_when: false
      check_mode: false

    - name: Get latest backup data file locations
      ansible.builtin.command: >-
        {{ int_var_hdbsql_path }} {{ int_var_hdbsql_args }} -I {{ int_fact_pre_backup_file_query_file }} -o {{ int_fact_pre_backup_file_result_file }}
      # although this task does create an output file, it is considered to make
      # no changes as the configuration of the systems isn't changed and
      # ultimately the output file is removed
      changed_when: false
      check_mode: false

    - name: Read backup file information
      community.general.read_csv:
        path: "{{ int_fact_pre_backup_file_result_file }}"
      register: int_reg_backup_files
      check_mode: false

  always:
    - name: Remove backup files query file
      ansible.builtin.file:
        path: "{{ int_fact_pre_backup_file_query_file }}"
        state: absent
      changed_when: false
      check_mode: false

    - name: Remove backup files result file
      ansible.builtin.file:
        path: "{{ int_fact_pre_backup_file_result_file }}"
        state: absent
      changed_when: false
      check_mode: false

- name: Get backup file data
  ansible.builtin.stat:
    path: "{{ item.DESTINATION_PATH }}"
    get_checksum: false
  loop: "{{ int_reg_backup_files.list }}"
  register: int_reg_backup_file_stat
  when: not backup_needed
  check_mode: false

- name: Assert that backup files exist
  ansible.builtin.assert:
    that: item.stat.exists
    fail_msg: >-
      The backup file "{{ item.stat.path }}" is part of the latest full backup
      taken, but it is not present in the file system. This suggests that the
      database may not be recoverable. Make a new file based backup manually
      to continue!
    success_msg: >-
      Backup file {{ item.stat.path }} exists
  loop: "{{ int_reg_backup_file_stat.results }}"
  when: not backup_needed

- name: Set action fact
  ansible.builtin.set_fact:
    int_fact_action: >-
      {% if not backup_needed %}Backups that matches the given parameters seem to have already been completed. No new backup will occur.
      {% else %}No backup files were found that match the given parameters. A backup will be taken.
      {% endif %}
  check_mode: false

- name: Print required action
  ansible.builtin.debug:
    msg: "{{ int_fact_action | trim }}"
  check_mode: false
